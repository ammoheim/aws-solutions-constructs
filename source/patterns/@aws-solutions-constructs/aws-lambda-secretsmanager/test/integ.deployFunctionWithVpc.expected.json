{
  "Description": "Integration Test for aws-lambda-secretsmanager",
  "Resources": {
    "testlambdasecretsmanagerLambdaFunctionServiceRole92CE007F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "testlambdasecretsmanagerLambdaFunctionServiceRoleDefaultPolicyF24BF460": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "testlambdasecretsmanagersecret4C99E6BF"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testlambdasecretsmanagerLambdaFunctionServiceRoleDefaultPolicyF24BF460",
        "Roles": [
          {
            "Ref": "testlambdasecretsmanagerLambdaFunctionServiceRole92CE007F"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
            }
          ]
        }
      }
    },
    "testlambdasecretsmanagerReplaceDefaultSecurityGroupsecuritygroupF837FD37": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "test-lambda-secretsmanager/test-lambda-secretsmanager/ReplaceDefaultSecurityGroup-security-group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
            },
            {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK"
            }
          ]
        }
      }
    },
    "testlambdasecretsmanagerLambdaFunction130E7301": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bS3BucketC6294FB3"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bS3VersionKey30C28A5A"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bS3VersionKey30C28A5A"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "testlambdasecretsmanagerLambdaFunctionServiceRole92CE007F",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SECRET_NAME": {
              "Fn::Select": [
                6,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Ref": "testlambdasecretsmanagersecret4C99E6BF"
                    }
                  ]
                }
              ]
            }
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs10.x",
        "TracingConfig": {
          "Mode": "Active"
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "testlambdasecretsmanagerReplaceDefaultSecurityGroupsecuritygroupF837FD37",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
            },
            {
              "Ref": "VpcisolatedSubnet2Subnet39217055"
            },
            {
              "Ref": "VpcisolatedSubnet3Subnet44F2537D"
            }
          ]
        }
      },
      "DependsOn": [
        "testlambdasecretsmanagerLambdaFunctionServiceRoleDefaultPolicyF24BF460",
        "testlambdasecretsmanagerLambdaFunctionServiceRole92CE007F"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions."
            }
          ]
        }
      }
    },
    "testlambdasecretsmanagersecret4C99E6BF": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "GenerateSecretString": {}
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc"
          }
        ]
      }
    },
    "VpcisolatedSubnet1SubnetE62B1B9B": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1a",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet1"
          }
        ]
      }
    },
    "VpcisolatedSubnet1RouteTableE442650B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet1"
          }
        ]
      }
    },
    "VpcisolatedSubnet1RouteTableAssociationD259E31A": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet1RouteTableE442650B"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
        }
      }
    },
    "VpcisolatedSubnet2Subnet39217055": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1b",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet2"
          }
        ]
      }
    },
    "VpcisolatedSubnet2RouteTable334F9764": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet2"
          }
        ]
      }
    },
    "VpcisolatedSubnet2RouteTableAssociation25A4716F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet2RouteTable334F9764"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet2Subnet39217055"
        }
      }
    },
    "VpcisolatedSubnet3Subnet44F2537D": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1c",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet3"
          }
        ]
      }
    },
    "VpcisolatedSubnet3RouteTableA2F6BBC0": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc/isolatedSubnet3"
          }
        ]
      }
    },
    "VpcisolatedSubnet3RouteTableAssociationDC010BEB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet3RouteTableA2F6BBC0"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet3Subnet44F2537D"
        }
      }
    },
    "VpcFlowLogIAMRole6A475D41": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "vpc-flow-logs.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc"
          }
        ]
      }
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn"
                ]
              }
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": [
          {
            "Ref": "VpcFlowLogIAMRole6A475D41"
          }
        ]
      }
    },
    "VpcFlowLogLogGroup7B5C56B9": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 731
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
            }
          ]
        }
      }
    },
    "VpcFlowLog8FF33A73": {
      "Type": "AWS::EC2::FlowLog",
      "Properties": {
        "ResourceId": {
          "Ref": "Vpc8378EB38"
        },
        "ResourceType": "VPC",
        "TrafficType": "ALL",
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "VpcFlowLogIAMRole6A475D41",
            "Arn"
          ]
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": {
          "Ref": "VpcFlowLogLogGroup7B5C56B9"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test-lambda-secretsmanager/Vpc"
          }
        ]
      }
    },
    "VpcSECRETSMANAGERF52907C2": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".secretsmanager"
            ]
          ]
        },
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ReplaceEndpointDefaultSecurityGroupsecuritygroupB97DD1AF",
              "GroupId"
            ]
          }
        ],
        "SubnetIds": [
          {
            "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
          },
          {
            "Ref": "VpcisolatedSubnet2Subnet39217055"
          },
          {
            "Ref": "VpcisolatedSubnet3Subnet44F2537D"
          }
        ],
        "VpcEndpointType": "Interface"
      }
    },
    "ReplaceEndpointDefaultSecurityGroupsecuritygroupB97DD1AF": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "test-lambda-secretsmanager/ReplaceEndpointDefaultSecurityGroup-security-group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock"
              ]
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock"
                    ]
                  },
                  ":443"
                ]
              ]
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
            },
            {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK"
            }
          ]
        }
      }
    }
  },
  "Parameters": {
    "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bS3BucketC6294FB3": {
      "Type": "String",
      "Description": "S3 bucket for asset \"6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4b\""
    },
    "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bS3VersionKey30C28A5A": {
      "Type": "String",
      "Description": "S3 key for asset version \"6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4b\""
    },
    "AssetParameters6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4bArtifactHash42A39A2C": {
      "Type": "String",
      "Description": "Artifact hash for asset \"6f9a889051a73435842f821b214f7f08d666f4ed8aea2c3c6928113c43077d4b\""
    }
  }
}